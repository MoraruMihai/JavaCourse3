subject.expressions=Expressions are essential building blocks of any Java program,\
usually created to produce a new value, although sometimes an expression assigns a \
 value to a variable. Expressions are built using values, variables, operators and method calls.\
 Types of Expressions: While an expression frequently produces a result, it doesn't always. There \
  are three types of expressions in Java: 1.	Those that produce a value, i.e., the result of (1	+ 1) 2.\
  Those that assign a variable, for example (v = 10) 3.	Those that have no result but might have a "side effect"\
  because an expression can include a wide range of elements such as method invocations or increment operators that\
  modify the state (i.e., memory) of a program.
subject.variables=Variable is name of reserved area allocated in memory. In other words, it is a name of memory location.\
   It is a combination of "vary + able" that means its value can be changed.\
There are three types of variables in Java: local variable, instance variable, static variable.\
Local Variable - A variable declared inside the body of the method is called local variable. You can use\
this variable only within that method and the other methods in the class aren't even aware that the\
variable exists. A local variable cannot be defined with "static" keyword.\
Instance Variable - A variable declared inside the class but outside the body of the method, is called\
instance variable. It is not declared as static. It is called instance variable because its value is\
instance specific and is not shared among instances.\
Static variable - A variable which is declared as static is called static variable. It cannot be local.\
You can create a single copy of static variable and share among all the instances of the class. Memory\
allocation for static variable happens only once when the class is loaded in the memory.

subject.primitives=In Java language, primitive data types are the building blocks of data manipulation.\
   These are the most basic data types available in Java language.\
There are 8 types of primitive data types: boolean data type, byte data type, char data typeshort data\
type, int data type, long data type, float data type, double data type\
Boolean - The Boolean data type is used to store only two possible values: true and false. This data type\
is used for simple flags that track true/false conditions. The Boolean data type specifies one bit of\
information, but its "size" can't be defined precisely.\
Example: Boolean one = false\
Byte - The byte data type is an example of primitive data type. It isan 8-bit signed two's complement integer.\
   Its value-range lies between -128 to 127 (inclusive). Its minimum value is -128 and maximum value is 127. \
  Its default value is 0.\
The byte data type is used to save memory in large arrays where the memory savings is most required. \
  It saves space because a byte is 4 times smaller than an integer. It can also be used in place of "int" data type.\
Example: byte a = 10, byte b = -20\
Short - The short data type is a 16-bit signed two's complement integer. Its value-range lies between -32,768 to \
  32,767 (inclusive). Its minimum value is -32,768 and maximum value is 32,767. Its default value is 0.The short data \
  type can also be used to save memory just like byte data type. A short data type is 2 times smaller than an integer.\
Example: short s = 10000, short r = -5000\
Int - The int data type is a 32-bit signed two's complement integer. Its value-range lies between \
  - 2,147,483,648 (-2^31) to 2,147,483,647 (2^31 -1) (inclusive). Its minimum value is - 2,147,483,648 and maximum \
  value is 2,147,483,647. Its default value is 0. The int data type is generally used as a default data type for \
  integral values unless if there is no problem about memory.\
Example: int a = 100000, int b = -200000\
Long - The long data type is a 64-bit two's complement integer. Its value-range lies between\
   -9,223,372,036,854,775,808(-2^63) to 9,223,372,036,854,775,807(2^63 -1)(inclusive). Its minimum value is \
  - 9,223,372,036,854,775,808and maximum value is 9,223,372,036,854,775,807. Its default value is 0. The long data \
  type is used when you need a range of values more than those provided by int.\
Example: long a = 100000L, long b = -200000L\
Float - The float data type is a single-precision 32-bit IEEE 754 floating point.Its value range is unlimited. \
  It is recommended to use a float (instead of double) if you need to save memory in large arrays of floating point \
  numbers. The float data type should never be used for precise values, such as currency. Its default value is 0.0F.\
Example: float f1 = 234.5f\
Double - The double data type is a double-precision 64-bit IEEE 754 floating point. Its value range is unlimited. \
  The double data type is generally used for decimal values just like float. The double data type also should never \
  be used for precise values, such as currency. Its default value is 0.0d.\
Example: double d1 = 12.3\
Char - The char data type is a single 16-bit Unicode character. Its value-range lies between \
  '\u0000' (or 0) to '\uffff' (or 65,535 inclusive).The char data type is used to store characters.\
Example: char letterA = 'A'.

subject.logical.operators=Logical operators are mainly used to control program flow. Usually, you will find them as\
   part of an if, a while, or some other control statement (Chapter 6)\
The Logical operators are:\
op1 && op2\
-- Performs a logical AND of the two operands.\
op1 || op2\
-- Performs a logical OR of the two operands.\
!op1\
-- Performs a logical NOT of the operand.\
The concept of logical operators is simple. They allow a program to make a decision based on multiple conditions.\
   Each operand is considered a condition that can be evaluated to a true or false value. Then the value of the\
   conditions is used to determine the overall value of the op1 operator op2 or !op1 grouping. The following examples\
   demonstrate different ways that logical conditions can be used.\
The && operator is used to determine whether both operands or conditions are true and.pl.\
For example:\
if ($firstVar == 10 && $secondVar == 9) {\
\
print("Error!");\
\
};\
If either of the two conditions is false or incorrect, then the print command is bypassed.\
The || operator is used to determine whether either of the conditions is true.\
For example:\
if ($firstVar == 9 || $firstVar == 10) {\
\
print("Error!");\
If either of the two conditions is true, then the print command is run.\
Caution If the first operand of the || operator evaluates to true, the second operand will not be evaluated. \
  This could be a source of bugs if you are not careful.\
For instance, in the following code fragment:\
if ($firstVar++ || $secondVar++) { print("\n"); }\
variable $secondVar will not be incremented if $firstVar++ evaluates to true.\
The ! operator is used to convert true values to false and false values to true. In other words, \
  it inverts a value. Perl considers any non-zero value to be true-even string values. For example:\
\
$firstVar = 10;\
$secondVar = !$firstVar;\
if ($secondVar == 0) {\
print("zero\n");\
}\
is equal to 0- and the program produces the following output:\
zero\
You could replace the 10 in the first line with "ten," 'ten,' or any non-zero, non-null value.\
