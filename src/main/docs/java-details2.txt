Java Courses
Java Basics:
	Casting
Casting is the action of converting between two different data types such as converting an int to a double and vice versa. Examine the code below for examples of casting.
**CastingExample.java
package exlcode;

public class CastingExample {

  // this converts 15.23 into an integer
  public static int exampleVariableOne = (int) 15.23;
  public static double exampleVariableTwo = exampleVariableOne;

  public static void main(String[] args) {
    System.out.println(exampleVariableOne);
    System.out.println(exampleVariableTwo);
  }

}
We just converted the double value 15.23 into an integer, which left only the whole number and the decimal places to be cut off. There is no rounding, it just ignores the numbers after the decimal point during casting. When you convert an int to a double, a decimal point will be added to match with the structure of a double. For example, double varOne = (double) 15; assigns 15.0 to varOne.
Even though it is possible to convert an int to a double without casting, it is best practice to always use casting for precision and thorough logic. Also, be careful with the loss of precision when converting data types. i.e. losing decimal points is losing precision.
	Ternary Operator
The if Statement
Use the if statement to specify a block of Java code to be executed if a condition is true.

^^Syntax
if (condition) {
  // block of code to be executed if the condition is true
}

!! Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.

In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:

**Example
if (20 > 18) {
  System.out.println("20 is greater than 18");
}

We can also test variables:

**Example
int x = 20;
int y = 18;
if (x > y) {
  System.out.println("x is greater than y");
}

Example explained
In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that "x is greater than y".


The else Statement
Use the else statement to specify a block of code to be executed if the condition is false.

^^ Syntax
if (condition) {
  // block of code to be executed if the condition is true
} else {
  // block of code to be executed if the condition is false
}
**Example
int time = 20;
if (time < 18) {
  System.out.println("Good day.");
} else {
  System.out.println("Good evening.");
}
// Outputs "Good evening."


Example explained
In the example above, time (20) is greater than 18, so the condition is false. Because of this, we move on to the else condition and print to the screen "Good evening". If the time was less than 18, the program would print "Good day".

The else if Statement
Use the else if statement to specify a new condition if the first condition is false.

^^ Syntax
if (condition1) {
  // block of code to be executed if condition1 is true
} else if (condition2) {
  // block of code to be executed if the condition1 is false and condition2 is true
} else {
  // block of code to be executed if the condition1 is false and condition2 is false
}

**Example
int time = 22;
if (time < 10) {
  System.out.println("Good morning.");
} else if (time < 20) {
  System.out.println("Good day.");
} else {
  System.out.println("Good evening.");
}
// Outputs "Good evening."


Example explained
In the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the else if statement, is also false, so we move on to the else condition since condition1 and condition2 is both false - and print to the screen "Good evening".

However, if the time was 14, our program would print "Good day."

Short Hand If...Else (Ternary Operator)
There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:

^^ Syntax
variable = (condition) ? expressionTrue :  expressionFalse;
Instead of writing:

**Example
int time = 20;
if (time < 18) {
  System.out.println("Good day.");
} else {
  System.out.println("Good evening.");
}

Using the Ternary operator you can simply write:

Example
int time = 20;
String result = (time < 18) ? "Good day." : "Good evening.";
System.out.println(result);

	Statements, White Spaces and Indentation
     Java statements
-	are instructions that tell the programming language what to do. A basic statement, like an assignment statement, assigns a value to a variable, as shown below:
**Example:
double entryFee = 15.75;
All Java statements must end in a semicolon (;). This tells Java that it should attempt to process all information up to that semicolon.
In our example, we declared a variable and gave it a value. For the next couple of examples, we'll look at some Java methods that offer a different way to declare a variable.
White Spaces
White space consists mostly of the space character that you produce by hitting the space bar on your keyboard and that is commonly used to separate words in sentences. There are four other white space characters in Java, the horizontal tab, the form feed, the carriage return, and the linefeed. Depending on your platform, when you hit the return or enter key, you get either a carriage return (the Mac), a linefeed (Unix) or both (DOS, Windows, VMS). This produces a hard line break in the source code text.

Outside of String literals Java treats all white space and runs of white space (more than one white space character in immediate succession) the same. It's used to separate tokens, and one space is as good as seven spaces, a tab and two carriage returns. Exactly which white space characters you use is primarily a result of what's convenient for human beings reading the code. The compiler doesn't care.
  Indentation
Indentation is used to make our code readable to other users, easier to edit, display how the braces match up and show the logic of the program in an organized fashion. Please look at the example below to see how indentation of the if-else statement makes it easy to see what is happening.
** IndentationExample.java
package exlcode;
public class IndentationExample {
  // standard indenting increases by 2 spaces as shown below
  // braces are used even when optional
  public static void main(String[] args) {
    // neat indenting:
    // if-else will be explained in Unit 5
    if (true) {
      System.out.println("True");
    } else {
      System.out.println("False");
    }
    // no indenting:
    if(true)          System.out.println("True");
    else    System.out.println("False");
  }
}
The goal of indentation is to show the logic of our program. Keeping indentation consistent throughout a program is essential. For statements inside a left and right brace, increase the indenting by two spaces. When another pair of braces is nested inside those braces, increase the indentation by another two spaces. It is a good idea to line up the braces vertically. Keep in mind that the function of indentation is to make the program more readable and understandable, which saves an immense amount of time when editing or refining your code.
	Methods
Java methods are blocks of code that perform a task, and can be used by other parts of a computer program, such as a declaration statement. For example, one basic function of a computer is display information to the screen. Why should we have to re-write that logic over and over? Instead, this Java declaration statement uses a delivered function to display information on multiple lines.

System.out.println("Line 1");
System.out.println("Line 2");
And the output of the previous code.
Remember, each Java statement ends with a semicolon.
We've just seen the basic variable declaration statement in action. Now let's look at another example you'll see a lot: a Java string statement, or a collection of characters or objects. For the purposes of this lesson, we won't be delving into the nitty gritty of Java classes or blueprints and objects. We'll just focus on the statements themselves and how they're formulated.

String entryCode = new String();
Now that we've covered some basic Java statements, let's take a look at some others that you're likely to see. There are always some exceptions to the rules, like the semicolon rule.

Java Intermediate:
	Classes
^ At its core, Java is an object-oriented language. It consists of objects, which are modules that can have data and some instructions. An object should be able to sustain itself. An Employee object, for example, contains some information about an employee. You can send salary, wage, benefit balances, etc. to the Employee object and it can do something with that info.
^ A class, on the other hand, is used to create objects. Think of a class as a blueprint for creating objects. In the following example, the object is really an Employee. However, we've created a class so that we can structure the object to our needs. Check out our example below. You'll notice the different portions of the Java code underneath the Employee object.
public class Employee {
  public String empName; //Employee name
  public double hourly_rate, hours_worked;
  public double getWeeklyHours() {
   return (hourly_rate * hours_worked);
  }
} //end of class
	This vs Super
Difference between super and super()
SUPER	SUPER()
The super keyword in Java is a reference variable that is used to refer parent class objects.	The super() in Java is a reference variable that is used to refer parent class constructors.
super can be used to call parent class’ variables and methods.	super() can be used to call parent class’ constructors only.
The variables and methods to be called through super keywordd can be done at any time,	Call to super() must be first statement in Derived(Student) Class constructor.
If one does not explicitly invoke a superclass variables or methods, by using super keyword, then nothing happens	If a constructor does not explicitly invoke a superclass constructor by using super(), the Java compiler automatically inserts a call to the no-argument constructor of the superclass.


	 Method Overloading

With method overloading, multiple methods can have the same name with different parameters:

**Example
int myMethod(int x)
float myMethod(float x)
double myMethod(double x, double y)

Consider the following example, which have two methods that add numbers of different type:

**Example
static int plusMethodInt(int x, int y) {
  return x + y;
}
static double plusMethodDouble(double x, double y) {
  return x + y;
}
public static void main(String[] args) {
  int myNum1 = plusMethodInt(8, 5);
  double myNum2 = plusMethodDouble(4.3, 6.26);
  System.out.println("int: " + myNum1);
  System.out.println("double: " + myNum2);
}
Instead of defining two methods that should do the same thing, it is better to overload one.

In the example below, we overload the plusMethod method to work for both int and double:

**Example
static int plusMethod(int x, int y) {
  return x + y;
}
static double plusMethod(double x, double y) {
  return x + y;
}
public static void main(String[] args) {
  int myNum1 = plusMethod(8, 5);
  double myNum2 = plusMethod(4.3, 6.26);
  System.out.println("int: " + myNum1);
  System.out.println("double: " + myNum2);
}

 !! Note: Multiple methods can have the same name as long as the number and/or type of parameters are different.

	Static vs Instance Variables/Methods
>> Static Variables: When a variable is declared as static, then a single copy of the variable is created and shared among all objects at a class level. Static variables are, essentially, global variables. All instances of the class share the same static variable.
Important points for static variables :
•	We can create static variables at class-level only.
•	static block and static variables are executed in order they are present in a program.

Instance Variables: Instance variables are non-static variables and are declared in a class outside any method, constructor or block.
•	As instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed.
•	Unlike local variables, we may use access specifiers for instance variables. If we do not specify any access specifier then the default access specifier will be used.
•	Initialization of Instance Variable is not Mandatory. Its default value is 0
•	Instance Variable can be accessed only by creating objects.

The main differences between static and non static variables are:

        STATIC VARIABLE	             NON STATIC VARIABLE
•	Static variables can be accessed using class name	•	Non static variables can be accessed using instance of a class
•	Static variables can be accessed by static and non static methods	•	Non static variables cannot be accessed inside a static method.
•	Static variables reduce the amount of memory used by a program.	•	Non static variables do not reduce the amount of memory used by a program
•	Static variables are shared among all instances of a class.	•	Non static variables are specific to that instance of a class.
•	Static variable is like a global variable and is available to all methods.	•	Non static variable is like a local variable and they can be accessed through only instance of a class.

>> Instance Method are methods which require an object of its class to be created before it can be called. To invoke an instance method, we have to create an Object of the class in within which it defined.
   Important Points:
•	Instance method(s) belong to the Object of the class not to the class i.e. they can be called after creating the Object of the class.
•	Every individual Object created from the class has its own copy of the instance method(s) of that class.
•	Instance methods are not stored on a per-instance basis, even with virtual methods. They’re stored in a single memory location, and they only “know” which object they belong to because the this pointer is passed when you call them.
•	They can be overridden since they are resolved using dynamic binding at run time.

Static methods are the methods in Java that can be called without creating an object of class. They are referenced by the class name itself or reference to the Object of that class.
Important Points:
•	Static method(s) are associated to the class in which they reside i.e. they can be called even without creating an instance of the class i.e ClassName.methodName(args).
•	They are designed with aim to be shared among all Objects created from the same class.
•	Static methods can not be overridden. But can be overloaded since they are resolved using static binding by compiler at compile time.

Instance method vs Static method
•	Instance method can access the instance methods and instance variables directly.
•	Instance method can access static variables and static methods directly.
•	Static methods can access the static variables and static methods directly.
•	Static methods can’t access instance methods and instance variables directly. They must use reference to object. And static method can’t use this keyword as there is no instance for ‘this’ to refer to.


	Encapsulation
The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:
- declare class variables/attributes as private
- provide public get and set methods to access and update the value of a private variable.
Get and Set
You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods.
The get method returns the variable value, and the set method sets the value.
Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case:
**Example
public class Person {
  private String name; // private = restricted access
  // Getter
  public String getName() {
    return name;
  }
  // Setter
  public void setName(String newName) {
    this.name = newName;
  }
}
!! Example explained
The get method returns the value of the variable name.
The set method takes a parameter (newName) and assigns it to the name variable. The this keyword is used to refer to the current object.
However, as the name variable is declared as private, we cannot access it from outside this class:
**Example
public class MyClass {
  public static void main(String[] args) {
    Person myObj = new Person();
    myObj.name = "John";  // error
    System.out.println(myObj.name); // error
  }
}
If the variable was declared as public, we would expect the following output: John.
However, as we try to access a private variable, we get an error:
MyClass.java:4: error: name has private access in Person
    myObj.name = "John";
         ^
MyClass.java:5: error: name has private access in Person
    System.out.println(myObj.name);
                  ^
2 errors
Instead, we use the getName() and setName() methods to acccess and update the variable:
**Example
public class MyClass {
  public static void main(String[] args) {
    Person myObj = new Person();
    myObj.setName("John"); // Set the value of the name variable to "John"
    System.out.println(myObj.getName());
  }
}
// Outputs "John"

	Polymorphism
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.
Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.
For example, think of a superclass called Animal that has a method called animalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):
**Example
class Animal {
  public void animalSound() {
    System.out.println("The animal makes a sound");
  }
}
class Pig extends Animal {
  public void animalSound() {
    System.out.println("The pig says: wee wee");
  }
}
class Dog extends Animal {
  public void animalSound() {
    System.out.println("The dog says: bow wow");
  }
}
Remember from the Inheritance chapter that we use the extends keyword to inherit from a class.
Now we can create Pig and Dog objects and call the animalSound() method on both of them:
**Example
class Animal {
  public void animalSound() {
    System.out.println("The animal makes a sound");
  }
}
class Pig extends Animal {
  public void animalSound() {
    System.out.println("The pig says: wee wee");
  }
}
class Dog extends Animal {
  public void animalSound() {
    System.out.println("The dog says: bow wow");
  }
}
class MyMainClass {
  public static void main(String[] args) {
    Animal myAnimal = new Animal();  // Create a Animal object
    Animal myPig = new Pig();  // Create a Pig object
    Animal myDog = new Dog();  // Create a Dog object
    myAnimal.animalSound();
    myPig.animalSound();
    myDog.animalSound();
  }
}
	Autoboxing/unboxing
Autoboxing: Converting a primitive value into an object of the corresponding wrapper class is called autoboxing. For example, converting int to Integer class. The Java compiler applies autoboxing when a primitive value is:

Passed as a parameter to a method that expects an object of the corresponding wrapper class.
Assigned to a variable of the corresponding wrapper class.
Unboxing: Converting an object of a wrapper type to its corresponding primitive value is called unboxing. For example conversion of Integer to int. The Java compiler applies unboxing when an object of a wrapper class is:

Passed as a parameter to a method that expects a value of the corresponding primitive type.
Assigned to a variable of the corresponding primitive type.

